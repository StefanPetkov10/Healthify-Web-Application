// <auto-generated />
using System;
using HealthifyApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthifyApp.Data.Migrations
{
    [DbContext(typeof(HealthifyDbContext))]
    partial class HealthifyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthifyApp.Data.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("49813fcd-5b78-4cca-b5a2-8ee7a9006941"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bf31377-0b35-486e-a614-79176d863c1e",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEMcxF0nm+WI7oc2oaxeeQhWQalfxqMxHsX/LbRBjmWMIPEdPirPZybZkJYl5Z2vcUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47cb53bc-4603-4876-bb82-4dad4537acad",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = new Guid("26c70f6a-5f07-46a0-beb8-a21af9955a2d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "965ca297-6294-4340-a4e7-7d92d61a644f",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEM5yz3aDhAzte6S1MxV9JU5YTWs130OlzmXY41oRFUcEKsdm5yql9Taw75wfeoelNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed8cafa3-fcec-43b3-af02-b1ec474465a5",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.ApplicationUserProfile", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "UserProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ApplicationUserProfiles", (string)null);

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("49813fcd-5b78-4cca-b5a2-8ee7a9006941"),
                            UserProfileId = new Guid("51d32863-946a-42af-8d5a-73621b1ee35e")
                        },
                        new
                        {
                            ApplicationUserId = new Guid("26c70f6a-5f07-46a0-beb8-a21af9955a2d"),
                            UserProfileId = new Guid("395c5591-a0b8-4249-9d58-ee5e7ec171cf")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.BMICalculation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the BMI calculation.");

                    b.Property<decimal>("BMI")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The BMI of the user.");

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasComment("The category of the BMI.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("BMICalculations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b675970-24e3-4d5c-9d68-35e7afea32ae"),
                            BMI = 24.7m,
                            Category = 2,
                            UserProfileId = new Guid("51d32863-946a-42af-8d5a-73621b1ee35e")
                        },
                        new
                        {
                            Id = new Guid("f5d324c1-9826-4c3f-8a49-bcecbea01982"),
                            BMI = 22m,
                            Category = 2,
                            UserProfileId = new Guid("395c5591-a0b8-4249-9d58-ee5e7ec171cf")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the exercise.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasComment("Description of the exercise.");

                    b.Property<int?>("Duration")
                        .HasMaxLength(240)
                        .HasColumnType("int")
                        .HasComment("Duration of the exercise in minutes.");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("URL of the image of the exercise.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the exercise.");

                    b.HasKey("Id");

                    b.ToTable("Exercises", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("652a5be2-031f-49fa-9f25-b78146427c85"),
                            Description = "A bodyweight exercise for upper body strength.",
                            Duration = 30,
                            ImageUrl = "https://anabolicaliens.com/cdn/shop/articles/199990_400x.png?v=1645089103",
                            Name = "Push-Up"
                        },
                        new
                        {
                            Id = new Guid("60ad6a78-419e-4925-8db1-5ae6169461dc"),
                            Description = "A lower body exercise for strength and endurance.",
                            Duration = 40,
                            ImageUrl = "https://weighttraining.guide/wp-content/uploads/2016/10/barbell-squat-resized-FIXED-2.png",
                            Name = "Squat"
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the goal.");

                    b.Property<int>("Activity")
                        .HasColumnType("int")
                        .HasComment("The activity of the user.");

                    b.Property<float?>("GoalChest")
                        .HasColumnType("real");

                    b.Property<float?>("GoalHips")
                        .HasColumnType("real");

                    b.Property<int>("GoalType")
                        .HasColumnType("int")
                        .HasComment("The goal chois");

                    b.Property<float?>("GoalWaist")
                        .HasColumnType("real");

                    b.Property<decimal>("GoalWeight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The user's goal weight.");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the goal start.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Goals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e3f591f-0e4d-42c3-beb7-d6fa059505b0"),
                            Activity = 3,
                            GoalChest = 95f,
                            GoalType = 1,
                            GoalWaist = 85f,
                            GoalWeight = 75m,
                            StartDate = new DateTime(2024, 12, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            UserProfileId = new Guid("51d32863-946a-42af-8d5a-73621b1ee35e")
                        },
                        new
                        {
                            Id = new Guid("a358f9df-b0d8-4dae-888c-b450e94b706a"),
                            Activity = 4,
                            GoalHips = 97f,
                            GoalType = 2,
                            GoalWeight = 67m,
                            StartDate = new DateTime(2024, 12, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            UserProfileId = new Guid("395c5591-a0b8-4249-9d58-ee5e7ec171cf")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.NutritionIntake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the nutrition intake.");

                    b.Property<int>("Calories")
                        .HasColumnType("int")
                        .HasComment("The calories intake by user.");

                    b.Property<int>("Carbohydrates")
                        .HasColumnType("int")
                        .HasComment("The carbohydrates intake by user.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the intake.");

                    b.Property<int>("Fats")
                        .HasColumnType("int")
                        .HasComment("The fats intake by user.");

                    b.Property<int>("Protein")
                        .HasColumnType("int")
                        .HasComment("The protein intake by user.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("NutritionIntake", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdeebb94-2676-4dfc-800b-cc4fa495a0e3"),
                            Calories = 1800,
                            Carbohydrates = 90,
                            Date = new DateTime(2024, 12, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Fats = 45,
                            Protein = 140,
                            UserProfileId = new Guid("51d32863-946a-42af-8d5a-73621b1ee35e")
                        },
                        new
                        {
                            Id = new Guid("b9c84c74-29c7-4859-932a-34d69dbaaef8"),
                            Calories = 2600,
                            Carbohydrates = 220,
                            Date = new DateTime(2024, 12, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Fats = 63,
                            Protein = 210,
                            UserProfileId = new Guid("395c5591-a0b8-4249-9d58-ee5e7ec171cf")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.ProgressLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the progress log.");

                    b.Property<decimal?>("Chest")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The chest of the user.");

                    b.Property<decimal>("CurrentWeight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The user's weight as of today.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the progress log.");

                    b.Property<decimal?>("Hips")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The hips of the user.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.Property<decimal?>("Waist")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The waist of the user.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ProgressLogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bba676f0-1716-4bc9-bce3-72e3063854b3"),
                            Chest = 100m,
                            CurrentWeight = 79.5m,
                            Date = new DateTime(2024, 12, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            UserProfileId = new Guid("51d32863-946a-42af-8d5a-73621b1ee35e"),
                            Waist = 90m
                        },
                        new
                        {
                            Id = new Guid("eb36c836-38aa-496f-a68a-35b0d31c2f15"),
                            CurrentWeight = 60.5m,
                            Date = new DateTime(2024, 12, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Hips = 95m,
                            UserProfileId = new Guid("395c5591-a0b8-4249-9d58-ee5e7ec171cf")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.TargetNutrition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the target nutritional.");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The goal ID.");

                    b.Property<string>("GoalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The goal name.");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the target nutritional start.");

                    b.Property<int>("TargetCalories")
                        .HasColumnType("int")
                        .HasComment("The calories should intake user.");

                    b.Property<int>("TargetCarbohydrates")
                        .HasColumnType("int")
                        .HasComment("The carbohydrates should intake user.");

                    b.Property<int>("TargetFats")
                        .HasColumnType("int")
                        .HasComment("The fats should intake user.");

                    b.Property<int>("TargetProtein")
                        .HasColumnType("int")
                        .HasComment("The protein should intake user.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("TargetNutritional", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("63363bb1-6855-46a3-a910-08277f1fe180"),
                            GoalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            GoalName = "Lose weight",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCalories = 2000,
                            TargetCarbohydrates = 100,
                            TargetFats = 50,
                            TargetProtein = 150,
                            UserProfileId = new Guid("51d32863-946a-42af-8d5a-73621b1ee35e")
                        },
                        new
                        {
                            Id = new Guid("64623ff1-de05-420d-a2e2-b3bac6477932"),
                            GoalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            GoalName = "Gain muscle",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCalories = 2500,
                            TargetCarbohydrates = 200,
                            TargetFats = 60,
                            TargetProtein = 200,
                            UserProfileId = new Guid("395c5591-a0b8-4249-9d58-ee5e7ec171cf")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the user profile.");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("The age of the user.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The creation of the user account.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(57)
                        .HasColumnType("nvarchar(57)")
                        .HasComment("The first name of the user.");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasComment("The gender of the user");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The height of the user.");

                    b.Property<bool>("IsActiveProfile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("indicates whether the profile is active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(57)
                        .HasColumnType("nvarchar(57)")
                        .HasComment("The last name of the user.");

                    b.Property<decimal>("StartingWeight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The starting weight of the user.");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("51d32863-946a-42af-8d5a-73621b1ee35e"),
                            Age = 30,
                            CreatedOn = new DateTime(2024, 12, 12, 15, 9, 30, 782, DateTimeKind.Local).AddTicks(3746),
                            FirstName = "John",
                            Gender = 1,
                            Height = 180m,
                            IsActiveProfile = true,
                            LastName = "Doe",
                            StartingWeight = 80m
                        },
                        new
                        {
                            Id = new Guid("395c5591-a0b8-4249-9d58-ee5e7ec171cf"),
                            Age = 25,
                            CreatedOn = new DateTime(2024, 12, 12, 15, 9, 30, 784, DateTimeKind.Local).AddTicks(2230),
                            FirstName = "Jane",
                            Gender = 2,
                            Height = 165m,
                            IsActiveProfile = true,
                            LastName = "Smith",
                            StartingWeight = 60m
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.WaterIntake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the water intake.");

                    b.Property<float>("DailyGoal")
                        .HasColumnType("real")
                        .HasComment("The daily goal of the water intake.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("WaterIntakes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("96c67bd6-c77a-44ec-ba38-658c6b1c3c5d"),
                            DailyGoal = 2.5f,
                            UserProfileId = new Guid("51d32863-946a-42af-8d5a-73621b1ee35e")
                        },
                        new
                        {
                            Id = new Guid("52227c04-6706-4f2d-84c2-ae7b51663f3b"),
                            DailyGoal = 3f,
                            UserProfileId = new Guid("395c5591-a0b8-4249-9d58-ee5e7ec171cf")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the workout.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the workout.");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasComment("Duration of the workout in minutes.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the workout.");

                    b.Property<DateTime>("ScheduleDateTime")
                        .HasColumnType("datetime2")
                        .HasComment("The schedule date and time of the workout.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Workouts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7de01856-d7b1-4bc6-9864-c508c340e193"),
                            Description = "A full-body workout to start the day.",
                            Duration = 60,
                            Name = "Morning Strength",
                            ScheduleDateTime = new DateTime(2024, 12, 12, 16, 9, 30, 786, DateTimeKind.Local).AddTicks(4678),
                            UserProfileId = new Guid("395c5591-a0b8-4249-9d58-ee5e7ec171cf")
                        },
                        new
                        {
                            Id = new Guid("101adcc6-4441-4032-adff-184e7c954f5b"),
                            Description = "High-intensity cardio for fat burn.",
                            Duration = 45,
                            Name = "Evening Cardio",
                            ScheduleDateTime = new DateTime(2024, 12, 12, 18, 9, 30, 786, DateTimeKind.Local).AddTicks(4079),
                            UserProfileId = new Guid("51d32863-946a-42af-8d5a-73621b1ee35e")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.WorkoutExercise", b =>
                {
                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Reps")
                        .HasColumnType("int");

                    b.Property<int?>("Sets")
                        .HasColumnType("int");

                    b.HasKey("WorkoutId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("WorkoutExercises", (string)null);

                    b.HasData(
                        new
                        {
                            WorkoutId = new Guid("7de01856-d7b1-4bc6-9864-c508c340e193"),
                            ExerciseId = new Guid("652a5be2-031f-49fa-9f25-b78146427c85"),
                            Reps = 10,
                            Sets = 3
                        },
                        new
                        {
                            WorkoutId = new Guid("101adcc6-4441-4032-adff-184e7c954f5b"),
                            ExerciseId = new Guid("60ad6a78-419e-4925-8db1-5ae6169461dc"),
                            Reps = 15,
                            Sets = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.ApplicationUserProfile", b =>
                {
                    b.HasOne("HealthifyApp.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserProfiles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("ApplicationUserProfiles")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.BMICalculation", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("BMICalculations")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Goal", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("Goals")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.NutritionIntake", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("NutritionIntake")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.ProgressLog", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("ProgressLogs")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.TargetNutrition", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("TargetNutritional")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.WaterIntake", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("WaterIntakes")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Workout", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("Workouts")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.WorkoutExercise", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthifyApp.Data.Models.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HealthifyApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HealthifyApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthifyApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HealthifyApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthifyApp.Data.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserProfiles");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Exercise", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.UserProfile", b =>
                {
                    b.Navigation("ApplicationUserProfiles");

                    b.Navigation("BMICalculations");

                    b.Navigation("Goals");

                    b.Navigation("NutritionIntake");

                    b.Navigation("ProgressLogs");

                    b.Navigation("TargetNutritional");

                    b.Navigation("WaterIntakes");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Workout", b =>
                {
                    b.Navigation("WorkoutExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
