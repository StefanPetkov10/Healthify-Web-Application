// <auto-generated />
using System;
using HealthifyApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthifyApp.Data.Migrations
{
    [DbContext(typeof(HealthifyDbContext))]
    [Migration("20241117154956_RefactoringDataBase")]
    partial class RefactoringDataBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthifyApp.Data.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8e3d6ef-b845-4f68-809f-903b4eebe17c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2cf616aa-f920-49b3-8837-bcc071c977c4",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEDpgltPNfZEotOWOcILJpWU4sVhH9uIeYuZYWUCekjbxBc8SrlI3ZK5RLd6k56jtBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40b8d40d-44c4-46a7-9800-32820f792a3a",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = new Guid("cbc6eb6e-b088-4ace-8998-89f20f2e63e0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a3380b9-6908-4d72-9922-0fa0c78e8aac",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEHosNTDjW2b12hVhRuqiAfDZC4YfBJl4F0EK/xIHxZkgnTa0SYBJxHC1L7ks7ga89Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80c7e4f0-5070-41cc-adbe-9c4238570eaa",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.ApplicationUserProfile", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "UserProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ApplicationUserProfiles");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.BMICalculation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the BMI calculation.");

                    b.Property<decimal>("BMI")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The BMI of the user.");

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasComment("The category of the BMI.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the BMI calculation.");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The height of the user.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The weight of the user.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("BMICalculations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac8f57ad-e5d5-44d7-924f-0d4dfafeee24"),
                            BMI = 24.7m,
                            Category = 2,
                            Date = new DateTime(2024, 11, 17, 17, 49, 54, 382, DateTimeKind.Local).AddTicks(7739),
                            Height = 180m,
                            UserProfileId = new Guid("c37fb5fb-08af-49ec-ab62-b582e33f34a0"),
                            Weight = 80m
                        },
                        new
                        {
                            Id = new Guid("701a3e82-ab99-410a-bd73-108f14aa71fc"),
                            BMI = 22m,
                            Category = 2,
                            Date = new DateTime(2024, 11, 17, 17, 49, 54, 382, DateTimeKind.Local).AddTicks(8756),
                            Height = 165m,
                            UserProfileId = new Guid("ca43940e-b816-47db-a7c6-5663e0886763"),
                            Weight = 60.6m
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the exercise.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasComment("Description of the exercise.");

                    b.Property<int?>("Duration")
                        .HasMaxLength(240)
                        .HasColumnType("int")
                        .HasComment("Duration of the exercise in minutes.");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("URL of the image of the exercise.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the exercise.");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9508b525-23cb-4207-9bee-a6bd9f47b436"),
                            Description = "A bodyweight exercise for upper body strength.",
                            Duration = 30,
                            ImageUrl = "https://anabolicaliens.com/cdn/shop/articles/199990_400x.png?v=1645089103",
                            Name = "Push-Up"
                        },
                        new
                        {
                            Id = new Guid("9ebe6c6a-cba0-4ee9-9fc6-2ea99127b87f"),
                            Description = "A lower body exercise for strength and endurance.",
                            Duration = 40,
                            ImageUrl = "https://weighttraining.guide/wp-content/uploads/2016/10/barbell-squat-resized-FIXED-2.png",
                            Name = "Squat"
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the goal.");

                    b.Property<int>("Activity")
                        .HasColumnType("int")
                        .HasComment("The activity of the user.");

                    b.Property<float?>("GoalChest")
                        .HasColumnType("real");

                    b.Property<float?>("GoalHips")
                        .HasColumnType("real");

                    b.Property<int>("GoalType")
                        .HasColumnType("int")
                        .HasComment("The goal chois");

                    b.Property<float?>("GoalWaist")
                        .HasColumnType("real");

                    b.Property<decimal>("GoalWeight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The user's goal weight.");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the goal start.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Goals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e120da0-b13a-475a-a4e9-a2a7355a955d"),
                            Activity = 3,
                            GoalChest = 95f,
                            GoalType = 1,
                            GoalWaist = 85f,
                            GoalWeight = 75m,
                            StartDate = new DateTime(2024, 11, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserProfileId = new Guid("c37fb5fb-08af-49ec-ab62-b582e33f34a0")
                        },
                        new
                        {
                            Id = new Guid("e2c89690-cced-45d6-a37c-5ea88904f4bd"),
                            Activity = 4,
                            GoalHips = 97f,
                            GoalType = 2,
                            GoalWeight = 67m,
                            StartDate = new DateTime(2024, 11, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserProfileId = new Guid("ca43940e-b816-47db-a7c6-5663e0886763")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.NutritionIntake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the nutrition intake.");

                    b.Property<int>("Calories")
                        .HasColumnType("int")
                        .HasComment("The calories intake by user.");

                    b.Property<int>("Carbohydrates")
                        .HasColumnType("int")
                        .HasComment("The carbohydrates intake by user.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the intake.");

                    b.Property<int>("Fats")
                        .HasColumnType("int")
                        .HasComment("The fats intake by user.");

                    b.Property<int>("Protein")
                        .HasColumnType("int")
                        .HasComment("The protein intake by user.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("NutritionIntake");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f880f3f-a7d5-49a4-8eed-8cc2efe88f96"),
                            Calories = 1800,
                            Carbohydrates = 90,
                            Date = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            Fats = 45,
                            Protein = 140,
                            UserProfileId = new Guid("c37fb5fb-08af-49ec-ab62-b582e33f34a0")
                        },
                        new
                        {
                            Id = new Guid("0eb579c0-1f8e-4144-af7f-2b35b733e834"),
                            Calories = 2600,
                            Carbohydrates = 220,
                            Date = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            Fats = 63,
                            Protein = 210,
                            UserProfileId = new Guid("ca43940e-b816-47db-a7c6-5663e0886763")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.ProgressLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the progress log.");

                    b.Property<decimal?>("Chest")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The chest of the user.");

                    b.Property<decimal>("CurrentWeight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The user's weight as of today.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the progress log.");

                    b.Property<decimal?>("Hips")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The hips of the user.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.Property<decimal?>("Waist")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The waist of the user.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ProgressLogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8c71914-5801-4817-b1a3-342d83410140"),
                            Chest = 100m,
                            CurrentWeight = 79.5m,
                            Date = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserProfileId = new Guid("c37fb5fb-08af-49ec-ab62-b582e33f34a0"),
                            Waist = 90m
                        },
                        new
                        {
                            Id = new Guid("f2f4aaf4-fed7-4613-8967-15764699343d"),
                            CurrentWeight = 60.5m,
                            Date = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            Hips = 95m,
                            UserProfileId = new Guid("ca43940e-b816-47db-a7c6-5663e0886763")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.TargetNutrition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the target nutritional.");

                    b.Property<string>("GoalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The goal name.");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the target nutritional start.");

                    b.Property<int>("TargetCalories")
                        .HasColumnType("int")
                        .HasComment("The calories should intake user.");

                    b.Property<int>("TargetCarbohydrates")
                        .HasColumnType("int")
                        .HasComment("The carbohydrates should intake user.");

                    b.Property<int>("TargetFats")
                        .HasColumnType("int")
                        .HasComment("The fats should intake user.");

                    b.Property<int>("TargetProtein")
                        .HasColumnType("int")
                        .HasComment("The protein should intake user.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("TargetNutritional");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c28b388-6b9d-4b78-ac96-6c75edaf0194"),
                            GoalName = "Lose weight",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCalories = 2000,
                            TargetCarbohydrates = 100,
                            TargetFats = 50,
                            TargetProtein = 150,
                            UserProfileId = new Guid("c37fb5fb-08af-49ec-ab62-b582e33f34a0")
                        },
                        new
                        {
                            Id = new Guid("3a0d672b-bc49-4059-a92a-7f28919c815a"),
                            GoalName = "Gain muscle",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCalories = 2500,
                            TargetCarbohydrates = 200,
                            TargetFats = 60,
                            TargetProtein = 200,
                            UserProfileId = new Guid("ca43940e-b816-47db-a7c6-5663e0886763")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the user profile.");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("The age of the user.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The creation of the user account.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(57)
                        .HasColumnType("nvarchar(57)")
                        .HasComment("The first name of the user.");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasComment("The gender of the user");

                    b.Property<string>("Goals")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasComment("The goals of the user.");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The height of the user.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(57)
                        .HasColumnType("nvarchar(57)")
                        .HasComment("The last name of the user.");

                    b.Property<decimal>("StartingWeight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The starting weight of the user.");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c37fb5fb-08af-49ec-ab62-b582e33f34a0"),
                            Age = 30,
                            CreatedOn = new DateTime(2024, 11, 17, 17, 49, 54, 370, DateTimeKind.Local).AddTicks(4911),
                            FirstName = "John",
                            Gender = 1,
                            Goals = "Lose weight",
                            Height = 180m,
                            LastName = "Doe",
                            StartingWeight = 80m
                        },
                        new
                        {
                            Id = new Guid("ca43940e-b816-47db-a7c6-5663e0886763"),
                            Age = 25,
                            CreatedOn = new DateTime(2024, 11, 17, 17, 49, 54, 382, DateTimeKind.Local).AddTicks(5128),
                            FirstName = "Jane",
                            Gender = 2,
                            Goals = "Gain muscle",
                            Height = 165m,
                            LastName = "Smith",
                            StartingWeight = 60m
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.WaterIntake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the water intake.");

                    b.Property<float?>("Consumed")
                        .HasColumnType("real")
                        .HasComment("The consumed water of the user.");

                    b.Property<float>("DailyGoal")
                        .HasColumnType("real")
                        .HasComment("The daily goal of the water intake.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the water intake.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("WaterIntakes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbb27d17-7228-4ffe-8046-b7dd2c0b744e"),
                            Consumed = 2f,
                            DailyGoal = 2.5f,
                            Date = new DateTime(2024, 11, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserProfileId = new Guid("c37fb5fb-08af-49ec-ab62-b582e33f34a0")
                        },
                        new
                        {
                            Id = new Guid("f16b6fe6-335d-4d15-bbeb-25a056ed17c8"),
                            Consumed = 2.8f,
                            DailyGoal = 3f,
                            Date = new DateTime(2024, 11, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserProfileId = new Guid("ca43940e-b816-47db-a7c6-5663e0886763")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the workout.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the workout.");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasComment("Duration of the workout in minutes.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the workout.");

                    b.Property<DateTime>("ScheduleDateTime")
                        .HasColumnType("datetime2")
                        .HasComment("The schedule date and time of the workout.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Workouts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a13a883-62f6-47ed-a9ef-1cc05229e0a8"),
                            Description = "A full-body workout to start the day.",
                            Duration = 60,
                            Name = "Morning Strength",
                            ScheduleDateTime = new DateTime(2024, 11, 17, 18, 49, 54, 384, DateTimeKind.Local).AddTicks(6504),
                            UserProfileId = new Guid("ca43940e-b816-47db-a7c6-5663e0886763")
                        },
                        new
                        {
                            Id = new Guid("baa6fa48-d77e-4718-850d-ffaf3c93a020"),
                            Description = "High-intensity cardio for fat burn.",
                            Duration = 45,
                            Name = "Evening Cardio",
                            ScheduleDateTime = new DateTime(2024, 11, 17, 20, 49, 54, 384, DateTimeKind.Local).AddTicks(6040),
                            UserProfileId = new Guid("c37fb5fb-08af-49ec-ab62-b582e33f34a0")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.WorkoutExercise", b =>
                {
                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Reps")
                        .HasColumnType("int");

                    b.Property<int?>("Sets")
                        .HasColumnType("int");

                    b.HasKey("WorkoutId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("WorkoutExercises");

                    b.HasData(
                        new
                        {
                            WorkoutId = new Guid("2a13a883-62f6-47ed-a9ef-1cc05229e0a8"),
                            ExerciseId = new Guid("9508b525-23cb-4207-9bee-a6bd9f47b436"),
                            Reps = 10,
                            Sets = 3
                        },
                        new
                        {
                            WorkoutId = new Guid("baa6fa48-d77e-4718-850d-ffaf3c93a020"),
                            ExerciseId = new Guid("9ebe6c6a-cba0-4ee9-9fc6-2ea99127b87f"),
                            Reps = 15,
                            Sets = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.ApplicationUserProfile", b =>
                {
                    b.HasOne("HealthifyApp.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserProfiles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("ApplicationUserProfiles")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.BMICalculation", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("BMICalculations")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Goal", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("Goal")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.NutritionIntake", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("NutritionIntake")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.ProgressLog", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("ProgressLogs")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.TargetNutrition", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("TargetNutritional")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.WaterIntake", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("WaterIntakes")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Workout", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("Workouts")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.WorkoutExercise", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthifyApp.Data.Models.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HealthifyApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HealthifyApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthifyApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HealthifyApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthifyApp.Data.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserProfiles");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Exercise", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.UserProfile", b =>
                {
                    b.Navigation("ApplicationUserProfiles");

                    b.Navigation("BMICalculations");

                    b.Navigation("Goal");

                    b.Navigation("NutritionIntake");

                    b.Navigation("ProgressLogs");

                    b.Navigation("TargetNutritional");

                    b.Navigation("WaterIntakes");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Workout", b =>
                {
                    b.Navigation("WorkoutExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
