// <auto-generated />
using System;
using HealthifyApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthifyApp.Data.Migrations
{
    [DbContext(typeof(HealthifyDbContext))]
    [Migration("20241116183635_SeedApplicationUser")]
    partial class SeedApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthifyApp.Data.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43879187-035d-4559-aad8-6e110290dcb9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69b52737-6634-41d4-8a1f-4fca671c4d8b",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEJxugAlrbMu4VP54Pb1iAwkKmLsxUi2bQBujyZhz0i+ikM+L/g+ii8EzQteaMXpKRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbe7ffa1-8a06-4c85-9b44-6977730ba029",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = new Guid("e2b0b923-cd70-4c78-aeef-75ddcf4fa362"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3771df6a-62cb-4fc7-ae20-478877e217ba",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAELcNq4jpTUMDWXAM6lDduWLkCG/bnzVca16Q4KsTcOwKmNEZLlpRihQ2rI1o7zGZwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fd7de7f-a651-4e27-bbf0-7c12283e07f7",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.ApplicationUserProfile", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "UserProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ApplicationUserProfiles");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.BMICalculation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the BMI calculation.");

                    b.Property<decimal>("BMI")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The BMI of the user.");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The category of the BMI.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the BMI calculation.");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The height of the user.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The weight of the user.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("BMICalculations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd09fd52-4fd7-43ea-a7e3-d3805ca621fd"),
                            BMI = 24.7m,
                            Category = "Normal weight",
                            Date = new DateTime(2024, 11, 16, 20, 36, 32, 640, DateTimeKind.Local).AddTicks(5084),
                            Height = 180m,
                            UserProfileId = new Guid("2e5da47a-5de2-4772-bb5d-d57b07b7f205"),
                            Weight = 80m
                        },
                        new
                        {
                            Id = new Guid("763fb6f9-bd86-4edf-82a5-b79e27110ead"),
                            BMI = 22m,
                            Category = "Normal weight",
                            Date = new DateTime(2024, 11, 16, 20, 36, 32, 640, DateTimeKind.Local).AddTicks(7114),
                            Height = 165m,
                            UserProfileId = new Guid("cec2f685-c9e2-43db-87f2-8524a41c80a2"),
                            Weight = 60.6m
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the exercise.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasComment("Description of the exercise.");

                    b.Property<int?>("Duration")
                        .HasMaxLength(240)
                        .HasColumnType("int")
                        .HasComment("Duration of the exercise in minutes.");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("URL of the image of the exercise.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the exercise.");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fb3b860-232e-4258-b15d-a210955cbafd"),
                            Description = "A bodyweight exercise for upper body strength.",
                            Duration = 30,
                            ImageUrl = "https://anabolicaliens.com/cdn/shop/articles/199990_400x.png?v=1645089103",
                            Name = "Push-Up"
                        },
                        new
                        {
                            Id = new Guid("ded77619-c2d5-4358-adf8-d1b0b12c5b02"),
                            Description = "A lower body exercise for strength and endurance.",
                            Duration = 40,
                            ImageUrl = "https://weighttraining.guide/wp-content/uploads/2016/10/barbell-squat-resized-FIXED-2.png",
                            Name = "Squat"
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.NutritionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the nutrition plan.");

                    b.Property<int>("Calories")
                        .HasColumnType("int")
                        .HasComment("The calories should intake user.");

                    b.Property<int>("Carbohydrates")
                        .HasColumnType("int")
                        .HasComment("The carbohydrates should intake user.");

                    b.Property<int>("Fats")
                        .HasColumnType("int")
                        .HasComment("The fats should intake user.");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The goal of the nutrition plan.");

                    b.Property<int>("Protein")
                        .HasColumnType("int")
                        .HasComment("The protein should intake user.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("NutritionPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec8b3060-d1bb-4e1f-b2ed-c65072b4b9ee"),
                            Calories = 2000,
                            Carbohydrates = 100,
                            Fats = 50,
                            Goal = "Lose weight",
                            Protein = 150,
                            UserProfileId = new Guid("2e5da47a-5de2-4772-bb5d-d57b07b7f205")
                        },
                        new
                        {
                            Id = new Guid("8e83560e-36f3-481f-b07d-f996e03a1ab8"),
                            Calories = 2500,
                            Carbohydrates = 200,
                            Fats = 60,
                            Goal = "Gain muscle",
                            Protein = 200,
                            UserProfileId = new Guid("cec2f685-c9e2-43db-87f2-8524a41c80a2")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.ProgressLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the progress log.");

                    b.Property<decimal?>("Chest")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The chest of the user.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the progress log.");

                    b.Property<decimal?>("Hips")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The hips of the user.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.Property<decimal?>("Waist")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The waist of the user.");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The weight of the user.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ProgressLogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5261e559-90f8-4dd3-a629-40b261f4ec49"),
                            Chest = 100m,
                            Date = new DateTime(2024, 11, 16, 20, 36, 32, 641, DateTimeKind.Local).AddTicks(7519),
                            UserProfileId = new Guid("2e5da47a-5de2-4772-bb5d-d57b07b7f205"),
                            Waist = 90m,
                            Weight = 79.5m
                        },
                        new
                        {
                            Id = new Guid("aa39bc5f-6aed-4e00-b287-50c7adb26c66"),
                            Date = new DateTime(2024, 11, 16, 20, 36, 32, 641, DateTimeKind.Local).AddTicks(9565),
                            Hips = 95m,
                            UserProfileId = new Guid("cec2f685-c9e2-43db-87f2-8524a41c80a2"),
                            Weight = 60.5m
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the user profile.");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("The age of the user.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The creation of the user account.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(57)
                        .HasColumnType("nvarchar(57)")
                        .HasComment("The first name of the user.");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasComment("The gender of the user");

                    b.Property<string>("Goals")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasComment("The goals of the user.");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The height of the user.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(57)
                        .HasColumnType("nvarchar(57)")
                        .HasComment("The last name of the user.");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The weight of the user.");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e5da47a-5de2-4772-bb5d-d57b07b7f205"),
                            Age = 30,
                            CreatedOn = new DateTime(2024, 11, 16, 20, 36, 32, 636, DateTimeKind.Local).AddTicks(6258),
                            FirstName = "John",
                            Gender = 1,
                            Goals = "Lose weight",
                            Height = 180m,
                            LastName = "Doe",
                            Weight = 80m
                        },
                        new
                        {
                            Id = new Guid("cec2f685-c9e2-43db-87f2-8524a41c80a2"),
                            Age = 25,
                            CreatedOn = new DateTime(2024, 11, 16, 20, 36, 32, 639, DateTimeKind.Local).AddTicks(9965),
                            FirstName = "Jane",
                            Gender = 2,
                            Goals = "Gain muscle",
                            Height = 165m,
                            LastName = "Smith",
                            Weight = 60m
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.WaterIntake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the water intake.");

                    b.Property<float?>("Consumed")
                        .HasColumnType("real")
                        .HasComment("The consumed water of the user.");

                    b.Property<float>("DailyGoal")
                        .HasColumnType("real")
                        .HasComment("The daily goal of the water intake.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the water intake.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("WaterIntakes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6fb919f-7245-41a4-9bc7-ae05dbc14b71"),
                            Consumed = 2f,
                            DailyGoal = 2.5f,
                            Date = new DateTime(2024, 11, 16, 0, 0, 0, 0, DateTimeKind.Local),
                            UserProfileId = new Guid("2e5da47a-5de2-4772-bb5d-d57b07b7f205")
                        },
                        new
                        {
                            Id = new Guid("66d8abd7-976e-45cf-9402-4ee241dd55c3"),
                            Consumed = 2.8f,
                            DailyGoal = 3f,
                            Date = new DateTime(2024, 11, 16, 0, 0, 0, 0, DateTimeKind.Local),
                            UserProfileId = new Guid("cec2f685-c9e2-43db-87f2-8524a41c80a2")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key for the workout.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the workout.");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasComment("Duration of the workout in minutes.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the workout.");

                    b.Property<DateTime>("ScheduleDateTime")
                        .HasColumnType("datetime2")
                        .HasComment("The schedule date and time of the workout.");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user profile ID.");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Workouts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ed83f87-9aa2-4f7b-8b7f-96772dbc56ab"),
                            Description = "A full-body workout to start the day.",
                            Duration = 60,
                            Name = "Morning Strength",
                            ScheduleDateTime = new DateTime(2024, 11, 16, 21, 36, 32, 643, DateTimeKind.Local).AddTicks(2316),
                            UserProfileId = new Guid("2e5da47a-5de2-4772-bb5d-d57b07b7f205")
                        },
                        new
                        {
                            Id = new Guid("598ca47c-f5b7-4448-9915-64a9551a57bf"),
                            Description = "High-intensity cardio for fat burn.",
                            Duration = 45,
                            Name = "Evening Cardio",
                            ScheduleDateTime = new DateTime(2024, 11, 16, 23, 36, 32, 643, DateTimeKind.Local).AddTicks(3335),
                            UserProfileId = new Guid("cec2f685-c9e2-43db-87f2-8524a41c80a2")
                        });
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.WorkoutExercise", b =>
                {
                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Reps")
                        .HasColumnType("int");

                    b.Property<int?>("Sets")
                        .HasColumnType("int");

                    b.HasKey("WorkoutId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("WorkoutExercises");

                    b.HasData(
                        new
                        {
                            WorkoutId = new Guid("2ed83f87-9aa2-4f7b-8b7f-96772dbc56ab"),
                            ExerciseId = new Guid("0fb3b860-232e-4258-b15d-a210955cbafd"),
                            Reps = 10,
                            Sets = 3
                        },
                        new
                        {
                            WorkoutId = new Guid("598ca47c-f5b7-4448-9915-64a9551a57bf"),
                            ExerciseId = new Guid("ded77619-c2d5-4358-adf8-d1b0b12c5b02"),
                            Reps = 15,
                            Sets = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.ApplicationUserProfile", b =>
                {
                    b.HasOne("HealthifyApp.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserProfiles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("ApplicationUserProfiles")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.BMICalculation", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("BMICalculations")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.NutritionPlan", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("NutritionPlans")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.ProgressLog", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("ProgressLogs")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.WaterIntake", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("WaterIntakes")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Workout", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.UserProfile", "UserProfile")
                        .WithMany("Workouts")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.WorkoutExercise", b =>
                {
                    b.HasOne("HealthifyApp.Data.Models.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthifyApp.Data.Models.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HealthifyApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HealthifyApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthifyApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HealthifyApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthifyApp.Data.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserProfiles");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Exercise", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.UserProfile", b =>
                {
                    b.Navigation("ApplicationUserProfiles");

                    b.Navigation("BMICalculations");

                    b.Navigation("NutritionPlans");

                    b.Navigation("ProgressLogs");

                    b.Navigation("WaterIntakes");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("HealthifyApp.Data.Models.Workout", b =>
                {
                    b.Navigation("WorkoutExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
